#ifndef INTEGRATION_H
#define INTEGRATION_H 

#include "Metropolis.h"
#include "Basis.h"
#include "Random.h"
#include "Geometry.h"
#include "Coefficients.h"
#include "readDataFiles.h"
#include "WeightFunction.h"
#include <iostream>
#include <array>
#include <vector>
#include <iomanip>
#include <cstdlib>
const int nPoints = 10;
const int nPointsW = 21;
using namespace std;

struct expoValues {
	vector<double> occExpo;
	vector<double> virExpo;
};


struct laguerreMine {
	double xj[20] = {0.0705398896919887533666890004584,
		0.37212681800161144379424138876,
		0.916582102483273564667716277074,
		1.70730653102834388068768966741,
		2.74919925530943212964503046049,
		4.04862531385088692237495336913,
		5.61517497086161651410453988565,
		7.45901745367106330976886021837,
		9.59439286958109677247367273428,
		12.0388025469643163096934092989,
		14.8142934426307399785126797101,
		17.9488955205193760173657909926,
		21.4787882402850109757351703696,
		25.4517027931869055035186774846,
		29.9325546317006120067136561352,
		35.0134342404790000062849359067,
		40.8330570567285710620295677078,
		47.6199940473465021399416271529,
		55.8107957500638988907507734445,
		66.5244165256157538186403187915};

	double wj[20] = {0.1687468018511138621492238996894807926,
		0.2912543620060682817167953238122264901,
		0.2666861028670012885495208689978822411,
		0.1660024532695068400314691278159369347,
		0.07482606466879237054006246396150169881,
		0.024964417309283221072822738323434186541,
		0.0062025508445722368474475478539466705,
		0.001144962386476908242039553569689556194,
		1.557417730278119747798095132141348943E-4,
		1.540144086522491568938067140480912011E-5,
		1.086486366517982351479700044389219023E-6,
		5.330120909556714750927802443054340163E-8,
		1.7579811790505820035778763784044478579E-9,
		3.725502402512320872629245853379442038E-11,
		4.767529251578190524494880716128448853E-13,
		3.37284424336243841236506064991389696E-15,
		1.1550143395003988309639624718083030921E-17,
		1.5395221405823435534638331966740244446E-20,
		5.28644272556915782880273587682799329E-24,
		1.6564566124990232959078190852910559845E-28};	

	array<double, 20> wjO;
	array<double, 20> wjV;
};


struct gaussKronrod {
  double tj[nPoints] = {0.99565716302580808073552728068900284792, 
    0.97390652851717172007796401208445205343, 
    0.93015749135570822600120718005950834623, 
    0.86506336668898451073209668842349304853, 
    0.78081772658641689706371757834504237716, 
    0.6794095682990244062343273651148735758, 
    0.56275713466860468333900009927269414084, 
    0.4333953941292471907992659431657841622, 
    0.2943928627014601981311266031038655662, 
    0.14887433898163121088482600112971998462};

  double wj[nPointsW] = {0.0116946388673718742780643960621920484,
  	0.0116946388673718742780643960621920484,
    0.03255816230796472747881897245938976062,
    0.03255816230796472747881897245938976062,
    0.05475589657435199603138130024458017637,
    0.05475589657435199603138130024458017637,
    0.075039674810919952767043140916190009395,
    0.075039674810919952767043140916190009395,
    0.09312545458369760553506546508336634439,
    0.09312545458369760553506546508336634439,
    0.10938715880229764189921059032580496027,
    0.10938715880229764189921059032580496027,
    0.12349197626206585107795810983107415951,
    0.12349197626206585107795810983107415951,
    0.13470921731147332592805400177170683276,
    0.13470921731147332592805400177170683276,
    0.1427759385770600807970942731387170609,
    0.1427759385770600807970942731387170609,
    0.1477391049013384913748415159720680455,
    0.1477391049013384913748415159720680455,
    0.14944555400291690566493646838982120375};

	array<double, 21> tp;
	array<double, 21> tau;
	array<double, 21> denom;
};


class Integration {
  public:
    gaussKronrod gk;
		laguerreMine lg;
		vector<double> gfs1;
		vector<double> gfs2;
		vector<double> gfs3;
		vector<double> gfs4; 
		vector<double> MosWP1;
  	vector<double> MosWP2;
  	vector<double> MosWP3;
  	vector<double> MosWP4;
		array<expoValues, 21> tauExpos;
    double FinalMP2Ener, FinalSCSEMP2;
    void generateMois(vector<double>&, double, double, double);
    void generateMoisSpherical(vector<double>&, double, double, double);
    double SphericalEvaluation(double, double, double, double, int, int);
		void MP2Energy(fstream&);
		void gaussKronrodEval();
		void tauIntegral(double&, double&, int t);
		void stochasticTauIntegration (double&, double&, double);
    void Data(fstream&, fstream&, fstream&);
  private:
    double sc[7] = {sqrt(3), 
                sqrt(5/2), 
                sqrt(15), 
                sqrt(3/2), 
                sqrt(35), 
                sqrt(35/2), 
                sqrt(5)}; 
    readDataInput readData;
    RandomWalk walker;
    Metropolis MRT2;
		Weights wg;
    Coefficients coeff;
    Basis basis;
};


#endif
